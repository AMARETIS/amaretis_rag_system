# run_demo_test.py
import os
from dotenv import load_dotenv

# Cargar variables de entorno (incluida la GOOGLE_API_KEY)
load_dotenv()

# Configurar variables de entorno para gRPC (para logs m√°s limpios)
os.environ["GRPC_VERBOSITY"] = "ERROR"
os.environ["GRPC_LOG_SEVERITY_LEVEL"] = "ERROR"

# Importar solo lo necesario para el agente y las herramientas
from rag_agent import create_amaretis_rag_agent 
from tools import get_rag_documents, calculate_budget 

# Definici√≥n de la funci√≥n principal
def run_agent_test():
    if 'GOOGLE_API_KEY' not in os.environ:
        print("‚ùå ERROR: La variable de entorno GOOGLE_API_KEY no est√° configurada.")
        return
        
    print("--- üöÄ Iniciando Test R√°pido del Agente AMARETIS RAG ---") 
    
    # ‚ö†Ô∏è ASUNCI√ìN: La DB 'chroma_amaretis_db' ya existe.
    
    # 5. Inicializaci√≥n del agente RAG
    print("üîπ 5. Inicializaci√≥n del agente RAG...")
    
    # NOTA: Usamos debug=True para ver el Thought/Action/Observation del agente
    rag_agent = create_amaretis_rag_agent(debug=True) 
    
    if not rag_agent:
        print("‚ùå Fallo al inicializar el agente RAG. Abortando.")
        return
    
    print("‚úÖ Agente RAG inicializado.")

    # 6. Prueba de consulta al agente RAG
    print("\nüîπ 6. Prueba de consulta al agente RAG...")
    
    # --- Consulta de Prueba para forzar la b√∫squeda ---
    # Usaremos una pregunta que sabemos que tiene datos tabulares para forzar la b√∫squeda RAG
    query = "Welche spezifischen Gruppen werden im Rahmen der MASSNAHME 02 (Lokale Netzwerke aktivieren) in PHASE 1 f√ºr die Kooperationsformate identifiziert, insbesondere im Hinblick auf kirchliche Tr√§ger und Wohnungsunternehmen?" 
    print(f"‚ùì Consulta: {query}")
    
    try:
        # La funci√≥n invoke iniciar√° la cadena de pensamiento del agente
        response = rag_agent.invoke({
            "input": query,
            "history": [], # Siempre vac√≠o para un inicio de conversaci√≥n
        })
    
        # La respuesta final en LangChain AgentExecutor est√° en la clave 'output'
        final_response_content = response.get('output', 'No se pudo obtener la respuesta final.')
    
        # Imprimir el resultado final
        print(f"\nüí° Resultado del agente:\n{final_response_content}") 
    
    except Exception as e:
        print(f"\n‚ùå Error al ejecutar la consulta de prueba: {e}")

if __name__ == "__main__":
    run_agent_test()